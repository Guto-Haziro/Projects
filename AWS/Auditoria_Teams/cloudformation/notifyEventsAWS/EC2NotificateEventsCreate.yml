AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Create AWS Lambda and AWS EventBridge for notify events occur in AWS EC2'
Parameters:
  WebHook1:
    Type: String
    Default: 'https://brasilprev.webhook.office.com/webhookb2/63d816bb-a405-4d97-9887-41613c0eb1e3@97def700-fa5c-4fc3-8940-b07f741d09b8/IncomingWebhook/1ae265266e4a4a2e8bc86225b9786fbc/8aa96814-ece3-443f-af46-3fa9406334c6'
    Description: "WebHook for notify Microsoft Teams"
  WebHook2:
    Type: String
    Default: 'https://brasilprev.webhook.office.com/webhookb2/afe38620-d481-434d-be99-0b09f146db04@97def700-fa5c-4fc3-8940-b07f741d09b8/IncomingWebhook/6a4dfe01f1b041499554fcbef1a0bb67/683bee7f-2873-4901-9114-1f7e98166c14'
    Description: "WebHook for notify Microsoft Teams"
  TagCreatedBy:
    Type: String
    Default: "Linkpartners"
    Description: "Tag for CreatedBy"
  TagSquad:
    Type: String
    Default: "CloudEngineers"
    Description: "Tag for Squad"
Resources:
  FunctionEC2NotificateEvents:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 6
      Role: !GetAtt FunctionEC2NotificationEventsRole.Arn
      Tags:
        - Key: createBy
          Value: !Ref TagCreatedBy
        - Key: Squad
          Value: !Ref TagSquad
      Code:
        ZipFile: |
          import json
          import os
          import urllib.request

          def lambda_handler(event, context):
              if 'detail' in event:
                  d2 = event['detail']
                  print(d2)
                  message = {'text': 'Uma alteração foi realizada no código EC2.'}
                  if d2['eventName'] == 'RunInstances':
                      items = d2['responseElements']['instancesSet']['items']
                      instanceId = items[0]['instanceId'] if items else None
                      if d2['userIdentity']['sessionContext']['sessionIssuer']['userName'] != 'AWSServiceRoleForAutoScaling' and 'AWSServiceRoleForECS':
                        message['text'] = f"A instância EC2 {instanceId} foi criada, pelo usuário {d2['userIdentity']['principalId']}."
                      else:
                        message['text'] = ''
                  if d2['eventName'] == 'StartInstances':
                      if d2['userIdentity']['principalId'] != 'AROA4IEZ2KGA6IGQDO6TQ:bp-devops-ec2-lowers-start-lambda':
                        message['text'] = f"A instância EC2 {d2['requestParameters']['instancesSet']['items']} foi iniciada, pelo usuário {d2['userIdentity']['principalId']}."
                      else:
                        message['text'] = ''
                  if d2['eventName'] == 'StopInstances':
                    if d2['userIdentity']['principalId'] != 'AROA4IEZ2KGA6IGQDO6TQ:bp-devops-ec2-lowers-stop-lambda':
                      message['text'] = f"A instância EC2 {d2['requestParameters']['instancesSet']['items']} foi pausada, pelo usuário {d2['userIdentity']['principalId']}."
                    else:
                        message['text'] = ''
                  if d2['eventName'] == 'TerminateInstances':
                      items2 = d2['requestParameters']['instancesSet']['items']
                      instanceId2 = items2[0]['instanceId'] if items2 else None 
                      if d2['userIdentity']['sessionContext']['sessionIssuer']['userName'] != 'AWSServiceRoleForAutoScaling' and 'AWSServiceRoleForECS':
                        message['text'] = f"A instância EC2 {instanceId2} foi terminada, pelo usuário {d2['userIdentity']['principalId']}."
                      else:
                        message['text'] = ''
                  if d2['eventName'] == 'DeleteTags':
                      if d2['userIdentity']['sessionContext']['sessionIssuer']['userName'] != 'AWSServiceRoleForECS':
                        message['text'] = f"Uma tag foi removida no EC2 {d2['requestParameters']['resourcesSet']['items']} pelo usuário {d2['userIdentity']['principalId']}."
                      else:
                        message['text'] = ''
                  if d2['eventName'] == 'CreateTags':
                      if d2['userIdentity']['sessionContext']['sessionIssuer']['userName'] != 'AWSServiceRoleForECS':
                        message['text'] = f"Uma tag foi adicionada no EC2 {d2['requestParameters']['resourcesSet']['items']} pelo usuário {d2['userIdentity']['principalId']}."
                      else:
                        message['text'] = '' 
                  
                  data = json.dumps(message)
                  headers = {'Content-Type': 'application/json'}
                          
                  req1 = urllib.request.Request(os.environ['TEAMS_WEBHOOK1'], data=data.encode('utf-8'), headers=headers)
                  try:
                      response1 = urllib.request.urlopen(req1)
                      response1.read()
                  except urllib.error.HTTPError as e:
                      print(f"Erro no primeiro webhook {e.code}: {e.reason}")
                      print(e.read())
                  except urllib.error.URLError as e:
                      print(f"Erro na conexão do primeiro webhook: {e.reason}")
                  except Exception as e:
                      print(f"Erro desconhecido do primeiro webhook: {e}")

                  # Enviar para o segundo webhook
                  req2 = urllib.request.Request(os.environ['TEAMS_WEBHOOK2'], data=data.encode('utf-8'), headers=headers)
                  try:
                      response2 = urllib.request.urlopen(req2)
                      response2.read()
                  except urllib.error.HTTPError as e:
                      print(f"Erro no segundo webhook {e.code}: {e.reason}")
                      print(e.read())
                  except urllib.error.URLError as e:
                      print(f"Erro na conexão do segundo webhook: {e.reason}")
                  except Exception as e:
                      print(f"Erro desconhecido do segundo webhook: {e}")
      Environment:
        Variables:
          TEAMS_WEBHOOK1: !Ref WebHook1
          TEAMS_WEBHOOK2: !Ref WebHook2

  FunctionEC2NotificationEventsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: createBy
          Value: !Ref TagCreatedBy
        - Key: Squad
          Value: !Ref TagSquad

  EventBridgeEC2NotificateEvents:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: EventBridge_EC2NotificateEvents
      Description: "EventRule"
      EventPattern:
        source: ["aws.ec2"]
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource: ["ec2.amazonaws.com"]
          eventName: ["CreateTags","DeleteTags","RunInstances","TerminateInstances","StopInstances","StartInstances"]
      Targets:
        - Arn: !GetAtt FunctionEC2NotificateEvents.Arn
          Id: "EventBridgeTarget"

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref FunctionEC2NotificateEvents
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventBridgeEC2NotificateEvents.Arn
