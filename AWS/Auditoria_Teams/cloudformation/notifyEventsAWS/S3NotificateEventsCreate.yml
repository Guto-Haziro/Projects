AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Create AWS Lambda and AWS EventBridge for notify events occur in AWS S3'
Parameters:
  WebHook1:
    Type: String
    Default: 'webhook'
    Description: "WebHook for notify Microsoft Teams"
  WebHook2:
    Type: String
    Default: 'webhook'
    Description: "WebHook for notify Microsoft Teams"
  TagCreatedBy:
    Type: String
    Default: "Linkpartners"
    Description: "Tag for CreatedBy"
  TagSquad:
    Type: String
    Default: "CloudEngineers"
    Description: "Tag for Squad"

Resources:
  FunctionS3NotificateEvents:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 6
      Role: !GetAtt FunctionS3NotificationEventsRole.Arn
      Tags:
        - Key: createBy
          Value: !Ref TagCreatedBy
        - Key: Squad
          Value: !Ref TagSquad
      Code:
        ZipFile: |
          import json
          import os
          import urllib.request

          def lambda_handler(event, context):
              if 'detail' in event:
                  d2 = event['detail']
                  print(d2)
                  message = {'text': 'Uma alteração foi realizada no código S3.'}
                  if d2['eventName'] == 'DeleteBucketTagging':
                      message['text'] = f"Uma tag foi removida do bucket {d2['requestParameters']['bucketName']} pelo usuário {d2['userIdentity']['arn']}."
                  if d2['eventName'] == 'PutBucketTagging':
                      message['text'] = f"Uma tag foi adicionada no bucket {d2['requestParameters']['bucketName']} pelo usuário {d2['userIdentity']['arn']}."
                  if d2['eventName'] == 'DeleteBucket':
                      message['text'] = f"Um bucket de nome {d2['requestParameters']['bucketName']} foi deletado pelo usuário {d2['userIdentity']['arn']}."
                  if d2['eventName'] == 'CreateBucket':
                      message['text'] = f"Um bucket de nome {d2['requestParameters']['bucketName']} foi criado pelo usuário {d2['userIdentity']['arn']}."
                  if d2['eventName'] == 'PutBucketPublicAccessBlock':
                      if d2['requestParameters']['PublicAccessBlockConfiguration']['RestrictPublicBuckets'] is True:
                          message['text'] = f"O bucket {d2['requestParameters']['bucketName']} foi bloqueado o acesso publico pelo usuário {d2['userIdentity']['arn']}."
                      elif d2['requestParameters']['PublicAccessBlockConfiguration']['RestrictPublicBuckets'] is False:
                          message['text'] = f"O bucket {d2['requestParameters']['bucketName']} foi permitido o acesso publico pelo usuário {d2['userIdentity']['arn']}."
                      else:
                          message['text']= "" 
                  
                  data = json.dumps(message)
                  headers = {'Content-Type': 'application/json'}
                          
                  req1 = urllib.request.Request(os.environ['TEAMS_WEBHOOK1'], data=data.encode('utf-8'), headers=headers)
                  try:
                      response1 = urllib.request.urlopen(req1)
                      response1.read()
                  except urllib.error.HTTPError as e:
                      print(f"Erro no primeiro webhook {e.code}: {e.reason}")
                      print(e.read())
                  except urllib.error.URLError as e:
                      print(f"Erro na conexão do primeiro webhook: {e.reason}")
                  except Exception as e:
                      print(f"Erro desconhecido do primeiro webhook: {e}")

                  # Enviar para o segundo webhook
                  req2 = urllib.request.Request(os.environ['TEAMS_WEBHOOK2'], data=data.encode('utf-8'), headers=headers)
                  try:
                      response2 = urllib.request.urlopen(req2)
                      response2.read()
                  except urllib.error.HTTPError as e:
                      print(f"Erro no segundo webhook {e.code}: {e.reason}")
                      print(e.read())
                  except urllib.error.URLError as e:
                      print(f"Erro na conexão do segundo webhook: {e.reason}")
                  except Exception as e:
                      print(f"Erro desconhecido do segundo webhook: {e}")
      Environment:
        Variables:
          TEAMS_WEBHOOK1: !Ref WebHook1
          TEAMS_WEBHOOK2: !Ref WebHook2

  FunctionS3NotificationEventsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: createBy
          Value: !Ref TagCreatedBy
        - Key: Squad
          Value: !Ref TagSquad

  EventBridgeS3NotificateEvents:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: EventBridge_S3NotificateEvents
      Description: "EventRule"
      EventPattern:
        source: ["aws.s3"]
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource: ["s3.amazonaws.com"]
          eventName: ["DeleteBucketTagging","PutBucketTagging","DeleteBucket","CreateBucket","PutBucketPublicAccessBlock"]
      Targets:
        - Arn: !GetAtt FunctionS3NotificateEvents.Arn
          Id: "EventBridgeTarget"

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref FunctionS3NotificateEvents
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventBridgeS3NotificateEvents.Arn
